"""
config.py

@copyright GPL License
@
"""

import os


# Base directory path, in which, all relative files are based upon.
container_base_directory = os.path.dirname(__file__)

# Base directory of the bash files.
bash_files = container_base_directory + "/bash"

# Base directory of the python modules.
py_files = container_base_directory + "/py"

# Data directory. Where results and temporary files are stored.
data_directory = container_base_directory + '/data'

# Directory of the moodle instance. Modify this path to the absolute
# path of your moodle instance.
moodle_directory = "/home/jandres/CompScie/eclass-unified-docker"

# Path to the phpunit.xml file.
#
# Note: moodle_directory will be a volume inside master container,
#       thus master container will be able to modify it.
#       When master container run phpunit/cli/init.php
#       phpunit.xml will be generated in moodle_directory.
#
#       Unless you know what you are doing DO NOT CHANGE THIS.
moodle_phpunitxml_file = moodle_directory + "/phpunit.xml"

# Template for container names.
container_name_template = 'moodle-parallel-phpunit-{0}'

# Ideally the number of cores.
container_count = 8

container_phpunit_dataroot_template = data_directory + '/{0}'

# This is implemented only for the master container. Allowing the container
# to override its dataroot also overrides the slaves' since they copy master
# container's dataroot.
master_container_phpunit_dataroot = container_phpunit_dataroot_template.format(
    container_name_template.format(0))

# List of container_names (slave and master).
container_names = [container_name_template.format(i) for i in range(container_count)]

# Container name of the master container.
master_container_name = container_names[0]

# Temporary results. This {0} is meant to be the name of the container
# this result is from.
container_temp_result_file_template = data_directory + '/{0}-result.out'

# Temporary result files. These are files generated by each containers (slave or
# master). These are then merged to result_file.
container_temp_result_files = [container_temp_result_file_template.format(container_name)
                               for container_name in container_names]

# Result of the phpunit test. Final output.
result_file = data_directory + '/result.out'

# The backup sql file from db. This is acquired from master container
# and restored to slave containers, avoiding the slow phpunit/cli/init.php
backup_file = data_directory + '/phpu_moodledb.sql'

# File containing "testsuite [time in seconds]" for each line.
# This is created so the next phpunit can use this for optimization purposes.
# unitest_execution_time_file is for program use only, the
# unitest_execution_time_file_hr is human readable version.
unitest_execution_time_file = data_directory + '/unittest-execution-time.out'
unitest_execution_time_file_hr = data_directory + '/unittest-execution-time-hr.out'

# Dockerfiles
dockerfile_directory = container_base_directory + '/Dockerfiles'
slave_dockerfile = dockerfile_directory + '/dockerfile-master'
master_dockerfile = dockerfile_directory + '/dockerfile-slave'

# Base container image. See ./Dockerfiles directory for more info.
master_image_name = 'moodle-parallel-phpunit-master'
slave_image_name = 'moodle-parallel-phpunit-slave'

# @var only_update_slaves Set to True if you are sure that master_container
#                         have its phpunit/cli/init.php called. False otherwise.
only_update_slaves = False

# @var stop_on_failure Set to True to *immediately quit after encountering an error.
# *Note: For this to be clean, we wait for the already executing phpunit tests.
#
# An early failure also won't allow data collection.
stop_on_failure = False